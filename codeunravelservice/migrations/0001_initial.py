# Generated by Django 2.0.5 on 2018-07-06 05:18

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='APP_SETTING',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=500)),
                ('app_url', models.CharField(max_length=500)),
                ('google_client_id', models.CharField(max_length=500)),
                ('facebook_app_key', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='CANDIDATE_PROFILE',
            fields=[
                ('profile_id', models.AutoField(primary_key=True, serialize=False)),
                ('upload_link', models.CharField(max_length=500)),
                ('creation_date', models.DateField(auto_now_add=True, null=True)),
                ('status', models.IntegerField(default=1)),
                ('download', models.CharField(max_length=500)),
                ('gender', models.CharField(max_length=20)),
                ('passout_year', models.IntegerField()),
                ('institute', models.CharField(max_length=500)),
                ('qualification', models.CharField(max_length=200)),
                ('current_location', models.CharField(max_length=200)),
                ('experience', models.IntegerField()),
                ('highest_percentage', models.CharField(max_length=250)),
                ('gitHub_link', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CHALLENGE_QUESTION',
            fields=[
                ('question_id', models.AutoField(primary_key=True, serialize=False)),
                ('question_description', models.TextField()),
                ('input_format', models.TextField(blank=True, null=True)),
                ('output_format', models.TextField(blank=True, null=True)),
                ('constraints', models.TextField(blank=True, null=True)),
                ('sample_input', models.TextField(blank=True, null=True)),
                ('sample_output', models.TextField(blank=True, null=True)),
                ('testcase_input', models.TextField(blank=True, null=True)),
                ('testcase_output', models.TextField(blank=True, null=True)),
                ('test_case_output_block_size', models.IntegerField(default=0, null=True)),
                ('title', models.TextField()),
                ('total_test_cases', models.IntegerField(default=0)),
                ('max_Score', models.IntegerField()),
                ('pass_score', models.IntegerField()),
                ('complexity_level', models.PositiveSmallIntegerField()),
                ('time_limit', models.IntegerField()),
                ('memory_limit', models.CharField(default='256kb', max_length=500)),
                ('allow_languages', models.CharField(max_length=500)),
                ('status', models.IntegerField(default=0)),
                ('creation_date', models.DateField(auto_now_add=True, null=True)),
                ('Practice', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='LANGUAGE',
            fields=[
                ('language_id', models.AutoField(primary_key=True, serialize=False)),
                ('language_name', models.CharField(max_length=500)),
                ('status', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='PERMISSION',
            fields=[
                ('permission_id', models.AutoField(primary_key=True, serialize=False)),
                ('permission_name', models.CharField(max_length=500)),
                ('permission_description', models.TextField()),
                ('status', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='RESULT',
            fields=[
                ('result_id', models.AutoField(primary_key=True, serialize=False)),
                ('score', models.IntegerField()),
                ('total_test_cases', models.IntegerField()),
                ('status', models.IntegerField(default=1)),
                ('total_test_case_passed', models.IntegerField()),
                ('time', models.TimeField()),
                ('memory', models.CharField(max_length=200)),
                ('language', models.TextField()),
                ('is_practice', models.IntegerField()),
                ('is_challenge', models.IntegerField()),
                ('source_code', models.TextField()),
                ('encoded_source_code', models.TextField()),
                ('is_qualified', models.IntegerField(default=0)),
                ('attempted_on', models.DateField(auto_now_add=True, null=True)),
                ('attempt_time', models.CharField(max_length=200)),
                ('finished_time', models.CharField(max_length=200)),
                ('output', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='ROLE',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=500)),
                ('role_description', models.CharField(max_length=500)),
                ('status', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='ROLE_PERMISSION',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(default=1)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeunravelservice.PERMISSION')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeunravelservice.ROLE')),
            ],
        ),
        migrations.CreateModel(
            name='SHORT_LIST',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('candidate_ids', models.TextField()),
                ('creation_date', models.DateField(auto_now_add=True, null=True)),
                ('candidate_names', models.TextField()),
                ('candidate_email', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TASK_ASSIGN',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(default=1)),
                ('assign_link', models.TextField()),
                ('assign_date', models.DateField(auto_now_add=True, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('start_time', models.CharField(blank=True, max_length=500, null=True)),
                ('finish_time', models.CharField(blank=True, max_length=500, null=True)),
                ('time_span', models.IntegerField(blank=True, null=True)),
                ('question_ids', models.CharField(max_length=800, null=True)),
                ('user_emails', models.TextField(blank=True, null=True)),
                ('challenge_position', models.CharField(max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='USER',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('alternate_email', models.CharField(blank=True, max_length=500, null=True)),
                ('phone_no', models.CharField(max_length=250, unique=True)),
                ('password', models.CharField(max_length=500)),
                ('login_token', models.CharField(blank=True, max_length=500, null=True)),
                ('status', models.IntegerField(default=0)),
                ('active', models.IntegerField(default=1)),
                ('is_login', models.IntegerField(default=0)),
                ('company_name', models.CharField(blank=True, max_length=500, null=True)),
                ('creation_date', models.DateField(auto_now_add=True, null=True)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeunravelservice.ROLE')),
            ],
        ),
        migrations.AddField(
            model_name='task_assign',
            name='recruiter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeunravelservice.USER'),
        ),
        migrations.AddField(
            model_name='short_list',
            name='recruiter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeunravelservice.USER'),
        ),
        migrations.AddField(
            model_name='result',
            name='candidate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeunravelservice.USER'),
        ),
        migrations.AddField(
            model_name='result',
            name='challenge_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeunravelservice.TASK_ASSIGN'),
        ),
        migrations.AddField(
            model_name='result',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeunravelservice.CHALLENGE_QUESTION'),
        ),
        migrations.AddField(
            model_name='challenge_question',
            name='recruiter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeunravelservice.USER'),
        ),
        migrations.AddField(
            model_name='candidate_profile',
            name='candidate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='codeunravelservice.USER'),
        ),
    ]
